generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DEV_DATABASE_URL")
}

model tags {
  id        BigInt  @id @default(autoincrement())
  name      String? @db.VarChar(50)
  slug      String? @db.VarChar(300)
  companyid BigInt?

  @@unique([name, companyid], name: "tag_unique")
}

model blog {
  id            BigInt    @id @default(autoincrement())
  title         String?   @db.VarChar(80)
  slug          String?   @db.VarChar(300)
  body          String
  excerpt       String?   @db.VarChar(350)
  mtitle        String?   @db.VarChar(80)
  mdesc         String?   @db.VarChar(200)
  categories    Int[]
  tags          Int[]
  created_by    Int?
  created_date  DateTime  @default(now()) @db.Timestamp(6)
  modified_by   Int?
  modified_date DateTime? @db.Timestamp(6)
  companyid     BigInt ?
  isdelete      String?   @db.VarChar(5)
  description   String?   @db.VarChar(200)
  author        String?   @db.VarChar(50)
  article_date  DateTime? @db.Timestamp(6)
  status        String?   @db.VarChar(1)
  published     String?   @db.VarChar(1)
  published_datetime  DateTime? @db.Timestamp(6)
  blog_id       String    @db.VarChar(20)
  repo          repo   @relation(fields: [repo_id], references: [id])
  repo_id       BigInt 
  @@unique([blog_id], name: "blog_unique")
}

model categories {
  id        BigInt  @id @default(autoincrement())
  name      String? @db.VarChar(50)
  slug      String? @db.VarChar(300)
  companyid BigInt?
  // templates templates[]

  @@unique([name, companyid], name: "category_unique")
}

model company {
  id          BigInt       @id @default(autoincrement())
  name        String?   @db.VarChar(60)
  status      String?   @db.VarChar(10)
  is_delete   String?   @db.VarChar(5)
  createddate DateTime? @db.Timestamp(6)
  updateddate DateTime? @db.Timestamp(6)
  logo        String?   @db.VarChar(500)
  about       String?   @db.VarChar(500)
  website_url String?   @db.VarChar(100)
  company_id  String?   @db.VarChar(20)
  repos repo[]
  @@unique([company_id], name: "company_unique")

}

model role {
  id          BigInt      @id
  name        String?     @db.VarChar(50)
  description String?     @db.VarChar(50)
  user_role   user_role[]
}

model test {
  id   BigInt  @id @default(autoincrement())
  name String? @db.VarChar(50)
}

model user_role {
  id      BigInt @default(autoincrement())
  role_id BigInt
  user_id BigInt
  role    role   @relation(fields: [role_id], references: [id])
  users   users  @relation(fields: [user_id], references: [id])

  @@id([role_id, user_id])
}

model users {
  id                BigInt      @id @default(autoincrement())
  first_name        String      @db.VarChar(100)
  email             String      @db.VarChar(320)
  last_login_date   DateTime?   @db.Timestamp(6)
  profile_pic       String?     @db.VarChar(100)
  reset_token       String?     @db.VarChar(45)
  salt              String?     @db.VarChar(255)
  hashed_password   String?     @db.VarChar(255)
  resetpasswordlink String?     @db.VarChar(500)
  created_by        Int?
  created_date      DateTime    @default(now()) @db.Timestamp(6)
  modified_by       Int?
  modified_date     DateTime?   @db.Timestamp(6)
  last_name         String?     @db.VarChar(100)
  phone             String?     @db.VarChar(20)
  status            String?     @db.VarChar(10)
  profile_url       String?     @db.VarChar(300)
  companyid         BigInt?
  source            String?     @db.VarChar(10)
  socialmedia_id    String?     @db.VarChar(100)
  access_rights     String?     @db.VarChar(5)
  user_id           String?     @db.VarChar(20)
  user_role         user_role[]
  
  @@unique([email], name: "users_email_key")
}

model repo{
    id            BigInt    @id @default(autoincrement())
    repo_id       String    @db.VarChar(20)
    name          String    @db.VarChar(150)
    company_id    BigInt
    status        String?   @db.VarChar(10)
    isdelete      String?   @db.VarChar(5)
    createddate   DateTime? @db.Timestamp(6)
    updateddate   DateTime? @db.Timestamp(6)
    repo_type     String?   @db.VarChar(10)
    company    company   @relation(fields: [company_id], references: [id])
    blogs blog[]
    custom_template custom_template[]
     @@unique([repo_id], name: "repo_unique")
}

model templates{
    id            BigInt    @id @default(autoincrement())
    name          String    @db.VarChar(60)
    status        String?   @db.VarChar(10)
    temp_id       String    @db.VarChar(20)
    is_delete     String?   @db.VarChar(5)
    content       Json?
    created_date  DateTime? @db.Timestamp(6)
    updated_date  DateTime? @db.Timestamp(6)
    tpl_type      String?    @db.VarChar(5)
    // category_id    BigInt
    //  categories    categories   @relation(fields: [category_id], references: [id])
    template_maping template_maping[]
    @@unique([name], name: "template_name_unique")
    @@unique([temp_id], name: "template_id_unique")

}

model custom_template{
    id            BigInt    @id @default(autoincrement())
    template_id   BigInt
    status        String?   @db.VarChar(10)
    ctemp_id      String    @db.VarChar(20)
    content       Json?
    is_delete     String?   @db.VarChar(5)
    repo_id       BigInt
    created_date  DateTime? @db.Timestamp(6)
    updated_date  DateTime? @db.Timestamp(6)
    tpl_type      String    @db.VarChar(5)
    name        String?   @db.VarChar(150)
    repo          repo   @relation(fields: [repo_id], references: [id])
    @@unique([ctemp_id], name: "custom_template_id_unique")

}

model template_group{
    id            BigInt    @id @default(autoincrement())
    name          String    @db.VarChar(100)
    description   String    @db.VarChar(100)
    status        String?   @db.VarChar(10)
    is_delete     String?   @db.VarChar(5)
    created_date  DateTime? @db.Timestamp(6)
    updated_date  DateTime? @db.Timestamp(6)
    template_maping template_maping[]
}

model template_maping{
    group_id           BigInt     
    temp_id            BigInt     
    template_group     template_group   @relation(fields: [group_id], references: [id])
    templates          templates        @relation(fields: [temp_id], references: [id])
     @@id([group_id, temp_id]) 
}