generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DEV_DATABASE_URL")
}

model tag {
  id            BigInt  @id @default(autoincrement())
  name          String? @db.VarChar(50)
  slug          String? @db.VarChar(300)
  company_id    BigInt?
  created_by    BigInt?
  createdAt     DateTime?  @default(now()) @db.Timestamp(6)
  updated_by    BigInt?
  updatedAt     DateTime? @updatedAt

  @@unique([name, company_id], name: "tag_unique")
}

model blog {
  id            BigInt    @id @default(autoincrement())
  blog_id       String    @db.VarChar(20)
  title         String?   @db.VarChar(80)
  description   String?   @db.VarChar(200)
  slug          String?   @db.VarChar(300)
  excerpt       String?   @db.VarChar(350)
  layout        String    @db.VarChar(50)
  category      Int[]
  tag           Int[]
  company_id    BigInt?
  repo_id       BigInt 
  author        String?   @db.VarChar(50)
  is_delete     String?   @db.VarChar(5)
  blog_date     DateTime? @db.Timestamp(6)
  status        String?   @db.VarChar(1)
  published     String?   @db.VarChar(1)
  published_on  DateTime? @db.Timestamp(6)
  created_by    BigInt?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updated_by    BigInt?
  updatedAt     DateTime? @updatedAt
  repo          repo   @relation(fields: [repo_id], references: [id])
  thumbnail     String?    @db.VarChar(500)
  publish_content    Json?
  content            Json?
  is_author     Boolean?   
  is_publish_date     Boolean?
  word_count     String?    @db.VarChar(10)
  read_time     String?    @db.VarChar(15)
  @@unique([blog_id], name: "blog_unique")
}

model category {
  id            BigInt  @id @default(autoincrement())
  name          String? @db.VarChar(50)
  slug          String? @db.VarChar(300)
  company_id    BigInt?
  created_by    BigInt?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updated_by    BigInt?
  updatedAt     DateTime? @updatedAt

  @@unique([name, company_id], name: "category_unique")
}

model company {
  id            BigInt       @id @default(autoincrement())
  company_id    String?   @db.VarChar(20)
  name          String?   @db.VarChar(60)
  status        String?   @db.VarChar(10)
  logo          String?   @db.VarChar(500)
  about         String?   @db.VarChar(500)
  website_url   String?   @db.VarChar(100)
  is_delete     String?   @db.VarChar(5)
  created_by    BigInt?
  updated_by    BigInt?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime? @updatedAt
  blog_home_format     String?   @db.VarChar(50)

  
  repo         repo[]
  @@unique([company_id], name: "company_unique")

}

model role {
  id          BigInt      @id
  name        String?     @db.VarChar(50)
  description String?     @db.VarChar(50)
  user_role   user_role[]
}


model user_role {
  id      BigInt @default(autoincrement())
  role_id BigInt
  user_id BigInt
  role    role   @relation(fields: [role_id], references: [id])
  users   users  @relation(fields: [user_id], references: [id])

  @@id([role_id, user_id])
}

model users {
  id                BigInt      @id @default(autoincrement())
  first_name        String      @db.VarChar(100)
  email             String      @db.VarChar(320)
  last_login_date   DateTime?   @db.Timestamp(6)
  profile_pic       String?     @db.VarChar(100)
  reset_token       String?     @db.VarChar(45)
  salt              String?     @db.VarChar(255)
  hashed_password   String?     @db.VarChar(255)
  resetpasswordlink String?     @db.VarChar(500)
  created_by        Int?
  created_date      DateTime    @default(now()) @db.Timestamp(6)
  modified_by       Int?
  modified_date     DateTime?   @db.Timestamp(6)
  last_name         String?     @db.VarChar(100)
  phone             String?     @db.VarChar(20)
  status            String?     @db.VarChar(10)
  profile_url       String?     @db.VarChar(300)
  company_id        BigInt?
  source            String?     @db.VarChar(10)
  socialmedia_id    String?     @db.VarChar(100)
  access_rights     String?     @db.VarChar(5)
  user_id           String?     @db.VarChar(20)
  user_role         user_role[]
  
  @@unique([email], name: "users_email_key")
}

model repo{
    id            BigInt    @id @default(autoincrement())
    repo_id       String    @db.VarChar(20)
    repo_name     String    @db.VarChar(150)
    company_id    BigInt
    status        String?   @db.VarChar(10)
    is_delete     String?   @db.VarChar(5)
    repo_type     String?   @db.VarChar(10)
    created_by    BigInt?
    updated_by    BigInt?
    createdAt     DateTime? @db.Timestamp(6)
    updatedAt     DateTime? @db.Timestamp(6)
    
    company    company   @relation(fields: [company_id], references: [id])
    blog blog[]
    lead_page lead_page[]
     @@unique([repo_id], name: "repo_unique")
}

model template{
    id                BigInt    @id @default(autoincrement())
    template_name     String    @db.VarChar(60)
    status            String?   @db.VarChar(10)
    template_id       String    @db.VarChar(20)
    is_delete         String?   @db.VarChar(5)
    blocks            Json?
    template_type     String?    @db.VarChar(5)
    created_by        BigInt?
    updated_by        BigInt?
    createdAt         DateTime? @db.Timestamp(6)
    updatedAt         DateTime? @db.Timestamp(6)
    
    
    template_collection template_collection[]
    @@unique([template_name], name: "template_name_unique")
    @@unique([template_id], name: "template_id_unique")

}

model lead_page{
    id              BigInt    @id @default(autoincrement())
    lead_page_id    String    @db.VarChar(20)
    lead_page_name  String?   @db.VarChar(150)
    template_id     BigInt
    status          String?   @db.VarChar(10)
    blocks          Json?
    is_delete       String?   @db.VarChar(5)
    repo_id         BigInt
    template_type   String    @db.VarChar(5)
    blocks_clone    Json?
    company_id      BigInt
    created_by      BigInt
    updated_by      BigInt
    createdAt       DateTime? @db.Timestamp(6)
    updatedAt       DateTime? @db.Timestamp(6)
    
    repo            repo   @relation(fields: [repo_id], references: [id])
    @@unique([lead_page_id], name: "lead_page_id_unique")

}

model collection {
    id            BigInt    @id @default(autoincrement())
    name          String    @db.VarChar(100)
    description   String    @db.VarChar(100)
    status        String?   @db.VarChar(10)
    is_delete     String?   @db.VarChar(5)
    created_by    BigInt?
    updated_by    BigInt?
    createdAt     DateTime? @db.Timestamp(6)
    updatedAt     DateTime? @db.Timestamp(6)
    template_collection template_collection[]
}

model template_collection{
    collection_id   BigInt     
    template_id     BigInt     
    collection      collection  @relation(fields: [collection_id], references: [id])
    template        template  @relation(fields: [template_id], references: [id])
    @@id([collection_id, template_id]) 
}